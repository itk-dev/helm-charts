---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "doc-ingestion.fullname" . }}
  namespace: {{ include "doc-ingestion.namespace" . }}
  labels:
    {{- include "doc-ingestion.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "doc-ingestion.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "doc-ingestion.selectorLabels" . | nindent 8 }}
    spec:
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      containers:
      - name: {{ include "doc-ingestion.name" . }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.service.targetPort }}
          name: http
        envFrom:
          - configMapRef:
              name: {{ include "doc-ingestion.fullname" . }}-config
        {{- if or .Values.config.apiKeyExistingSecret .Values.config.tikaExistingSecret}}
        env:
          {{- if .Values.config.apiKeyExistingSecret }}
          - name: API_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.config.apiKeyExistingSecret }}
                key: {{ .Values.config.apiKeyExistingSecretKey }}
          {{- end }}
          {{- if .Values.config.tikaExistingSecret }}
          - name: TIKA_USER
            valueFrom:
              secretKeyRef:
                name: {{ .Values.config.tikaExistingSecret }}
                key: {{ .Values.config.tikaUserKey }}
          - name: TIKA_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.config.tikaExistingSecret }}
                key: {{ .Values.config.tikaPasswordKey }}
          {{- end }}
        {{- end }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        readinessProbe:
          httpGet:
            path: /health
            port: {{ .Values.service.targetPort }}
          initialDelaySeconds: {{ .Values.healthCheck.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.healthCheck.readiness.periodSeconds }}
          timeoutSeconds: {{ .Values.healthCheck.readiness.timeoutSeconds }}
          failureThreshold: {{ .Values.healthCheck.readiness.failureThreshold }}
        livenessProbe:
          httpGet:
            path: /health
            port: {{ .Values.service.targetPort }}
          initialDelaySeconds: {{ .Values.healthCheck.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.healthCheck.liveness.periodSeconds }}
          timeoutSeconds: {{ .Values.healthCheck.liveness.timeoutSeconds }}
          failureThreshold: {{ .Values.healthCheck.liveness.failureThreshold }}
        securityContext:
          {{- toYaml .Values.containerSecurityContext | nindent 10 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}